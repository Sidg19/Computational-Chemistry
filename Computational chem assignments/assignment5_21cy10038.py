# -*- coding: utf-8 -*-
"""Assignment5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YKmB43Hm5MMHuJiH01s0XLez4XuQSftN
"""

import numpy as np
import pandas as pd
import random
import math

from google.colab import files
uploaded = files.upload()

filename = list(uploaded.keys())[0]
df = pd.read_csv(filename, delim_whitespace=True, skiprows=1, names = ['x(A)','y(A)', 'z(A)'])
df.head()

def pbc(x,y,z, count, n):      #PBC cell length = n Ang
  for i in range(len(x)):
    if x[i] > n/2:
      x[i] = x[i] - n
      count.append(x[i])


    elif x[i] < -n/2:
      x[i] = x[i] + n
      count.append(x[i])


    if y[i] > n/2:
      y[i] = y[i] - n
      count.append(y[i])


    elif y[i] < -n/2:
      y[i] = y[i] + n
      count.append(y[i])

    if z[i] > n/2:
      z[i] = z[i] - n
      count.append(z[i])

    elif z[i] < -n/2:
      z[i] = z[i] + n
      count.append(z[i])

  return x,y,z


#For calculating the distance travelled by each particle

def dist(x, y, z, X, Y, Z):
  dist = math.sqrt((x-X)**2 + (y-Y)**2 + (z-Z)**2)
  return dist

#list for keeping track of the distance travelled by each molecule
zerolist = [0]*(len(df))




n = float(input("PBC cell length is: "))


X = df['x(A)']   #Individual columns
Y = df['y(A)']
Z = df['z(A)']


dir = [1, -1]             #For choosing +1 or -1

#Potential energy function Lennard Jones

e = 1          #Epsilon
si = 3.4       #Sigma

def LJ(r):
  V = 4*e*((si/r)**12 - (si/r)**6)
  return V

#list which keeps track of distance travelled by each molecule
zerolist = [0]*(len(df))

x = X.copy()
y = Y.copy()
z = Z.copy()

E = 0 #Potential energy


for j in range(10):             #number of iterations

  count1 = []

  for i in range(len(df)):
    corr = random.choice(['X' , 'Y', 'Z'])


    if corr == 'X':
      x[i] = X[i]
      corr1 = random.choice(dir)
      X[i] = X[i] + int(corr1)

      pbc(X,Y,Z, count1, n)
      zerolist[i] += math.sqrt((x[i]-X[i])**2)

    elif corr == 'Y':
      y[i] = Y[i]
      corr1 = random.choice(dir)
      Y[i] = Y[i] + int(corr1)


      pbc(X,Y,Z, count1, n)
      zerolist[i] += math.sqrt((y[i]-Y[i])**2)

    elif corr == 'Z':
      z[i] = Z[i]
      corr1 = random.choice(dir)
      Z[i] = Z[i] + int(corr1)

      pbc(X,Y,Z, count1, n)
      zerolist[i] += math.sqrt((z[i]-Z[i])**2)

  for k in range(len(df)):
    for l in range(k,len(df)):
      Lx = X[k] - X[l]
      Ly = Y[k] - Y[l]
      Lz = Z[k] - Z[l]
      if Lx > n/2:
        Lx = Lx - n
      elif Lx < -n/2:
        Lx = Lx + n

      if Ly > n/2:
        Ly = Ly - n
      elif Ly < -n/2:
        Ly = Ly + n

      if Lz > n/2:
        Lz = Lz - n
      elif Lz < -n/2:
        Lz = Lz + n

      d = math.sqrt(Lx**2 + Ly**2 + Lz**2)
      if d>3 and d<9:
        E += LJ(d)
      else:
        E += 0
  print(f"{j}th iteration")
  print("Energy of the system is : " , E)
  E = 0

